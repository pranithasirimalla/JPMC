{"version":"2","toolVersion":"1.84.0","snippets":{"8be0356cef45a752518962769e118635cf8887ab1ae3fbd4806fd35e5ee3a778":{"translations":{"python":{"source":"# automatic entry look up\napi_handler = lambda_.NodejsFunction(self, \"api\")\nauth_handler = lambda_.NodejsFunction(self, \"auth\")","version":"2"},"csharp":{"source":"// automatic entry look up\nvar apiHandler = new NodejsFunction(this, \"api\");\nvar authHandler = new NodejsFunction(this, \"auth\");","version":"1"},"java":{"source":"// automatic entry look up\nNodejsFunction apiHandler = new NodejsFunction(this, \"api\");\nNodejsFunction authHandler = new NodejsFunction(this, \"auth\");","version":"1"},"go":{"source":"// automatic entry look up\napiHandler := lambda.NewNodejsFunction(this, jsii.String(\"api\"))\nauthHandler := lambda.NewNodejsFunction(this, jsii.String(\"auth\"))","version":"1"},"$":{"source":"// automatic entry look up\nconst apiHandler = new lambda.NodejsFunction(this, 'api');\nconst authHandler = new lambda.NodejsFunction(this, 'auth');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":48}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// automatic entry look up\nconst apiHandler = new lambda.NodejsFunction(this, 'api');\nconst authHandler = new lambda.NodejsFunction(this, 'auth');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":6,"104":2,"194":2,"197":2,"225":2,"242":2,"243":2},"fqnsFingerprint":"5d8e01b0af2c86eda5b3c98a5b5c60e3847ecb5f2b8dc9869c0ecfb874819332"},"78475c05062f6e5e8ebaa53946a27e5c74af88cebcd75179005fda1f1a3f6620":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"MyFunction\",\n    entry=\"/path/to/my/file.ts\",  # accepts .js, .jsx, .ts, .tsx and .mjs files\n    handler=\"myExportedFunc\"\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"MyFunction\", new NodejsFunctionProps {\n    Entry = \"/path/to/my/file.ts\",  // accepts .js, .jsx, .ts, .tsx and .mjs files\n    Handler = \"myExportedFunc\"\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"MyFunction\")\n        .entry(\"/path/to/my/file.ts\") // accepts .js, .jsx, .ts, .tsx and .mjs files\n        .handler(\"myExportedFunc\")\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"MyFunction\"), &NodejsFunctionProps{\n\tEntry: jsii.String(\"/path/to/my/file.ts\"),\n\t // accepts .js, .jsx, .ts, .tsx and .mjs files\n\tHandler: jsii.String(\"myExportedFunc\"),\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'MyFunction', {\n  entry: '/path/to/my/file.ts', // accepts .js, .jsx, .ts, .tsx and .mjs files\n  handler: 'myExportedFunc', // defaults to 'handler'\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":56}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'MyFunction', {\n  entry: '/path/to/my/file.ts', // accepts .js, .jsx, .ts, .tsx and .mjs files\n  handler: 'myExportedFunc', // defaults to 'handler'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":4,"104":1,"193":1,"194":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"32d65ff3009fcaeb0801eceebcef51823edb8af2273d1a29ede5f6297a230cd9"},"33f259c359f0d08bc4c18cd291aba09141f922d4ad824b6fd65a54370c6cc6cb":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        external_modules=[\"aws-sdk\", \"cool-module\"\n        ]\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        ExternalModules = new [] { \"aws-sdk\", \"cool-module\" }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .externalModules(List.of(\"aws-sdk\", \"cool-module\"))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tExternalModules: []*string{\n\t\t\tjsii.String(\"aws-sdk\"),\n\t\t\tjsii.String(\"cool-module\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    externalModules: [\n      'aws-sdk', // Use the 'aws-sdk' available in the Lambda runtime\n      'cool-module', // 'cool-module' is already available in a Layer\n    ],\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":143}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    externalModules: [\n      'aws-sdk', // Use the 'aws-sdk' available in the Lambda runtime\n      'cool-module', // 'cool-module' is already available in a Layer\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":4,"104":1,"192":1,"193":2,"194":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"c2dec9bd5395e8435270fc33757789c8832d08dc069f071474c31d6c55d74c22"},"f3304089cff08d6e282fb6a22c47ab1212add5b49dea43adb8a5128c48bc2f14":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        node_modules=[\"native-module\", \"other-module\"]\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        NodeModules = new [] { \"native-module\", \"other-module\" }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .nodeModules(List.of(\"native-module\", \"other-module\"))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tNodeModules: []*string{\n\t\t\tjsii.String(\"native-module\"),\n\t\t\tjsii.String(\"other-module\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    nodeModules: ['native-module', 'other-module'],\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":161}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    nodeModules: ['native-module', 'other-module'],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":4,"104":1,"192":1,"193":2,"194":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"c2dec9bd5395e8435270fc33757789c8832d08dc069f071474c31d6c55d74c22"},"1a31a4269bdbd95adbdca7866f00a624f1b9d6990a668fd4276f239e5f73dfdf":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        minify=True,  # minify code, defaults to false\n        source_map=True,  # include source map, defaults to false\n        source_map_mode=lambda_.SourceMapMode.INLINE,  # defaults to SourceMapMode.DEFAULT\n        sources_content=False,  # do not include original source into source map, defaults to true\n        target=\"es2020\",  # target environment for the generated JavaScript code\n        loader={ # Use the 'dataurl' loader for '.png' files\n            \".png\": \"dataurl\"},\n        define={ # Replace strings during build time\n            \"process.env.API_KEY\": JSON.stringify(\"xxx-xxxx-xxx\"),\n            \"process.env.PRODUCTION\": JSON.stringify(True),\n            \"process.env.NUMBER\": JSON.stringify(123)},\n        log_level=lambda_.LogLevel.SILENT,  # defaults to LogLevel.WARNING\n        keep_names=True,  # defaults to false\n        tsconfig=\"custom-tsconfig.json\",  # use custom-tsconfig.json instead of default,\n        metafile=True,  # include meta file, defaults to false\n        banner=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        footer=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        charset=lambda_.Charset.UTF8,  # do not escape non-ASCII characters, defaults to Charset.ASCII\n        format=lambda_.OutputFormat.ESM,  # ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        main_fields=[\"module\", \"main\"],  # prefer ECMAScript versions of dependencies\n        inject=[\"./my-shim.js\", \"./other-shim.js\"],  # allows to automatically replace a global variable with an import from another file\n        esbuild_args={ # Pass additional arguments to esbuild\n            \"--log-limit\": \"0\",\n            \"--splitting\": True}\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        Minify = true,  // minify code, defaults to false\n        SourceMap = true,  // include source map, defaults to false\n        SourceMapMode = SourceMapMode.INLINE,  // defaults to SourceMapMode.DEFAULT\n        SourcesContent = false,  // do not include original source into source map, defaults to true\n        Target = \"es2020\",  // target environment for the generated JavaScript code\n        Loader = new Dictionary<string, string> {  // Use the 'dataurl' loader for '.png' files\n            { \".png\", \"dataurl\" } },\n        Define = new Dictionary<string, string> {  // Replace strings during build time\n            { \"process.env.API_KEY\", JSON.Stringify(\"xxx-xxxx-xxx\") },\n            { \"process.env.PRODUCTION\", JSON.Stringify(true) },\n            { \"process.env.NUMBER\", JSON.Stringify(123) } },\n        LogLevel = LogLevel.SILENT,  // defaults to LogLevel.WARNING\n        KeepNames = true,  // defaults to false\n        Tsconfig = \"custom-tsconfig.json\",  // use custom-tsconfig.json instead of default,\n        Metafile = true,  // include meta file, defaults to false\n        Banner = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Footer = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Charset = Charset.UTF8,  // do not escape non-ASCII characters, defaults to Charset.ASCII\n        Format = OutputFormat.ESM,  // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        MainFields = new [] { \"module\", \"main\" },  // prefer ECMAScript versions of dependencies\n        Inject = new [] { \"./my-shim.js\", \"./other-shim.js\" },  // allows to automatically replace a global variable with an import from another file\n        EsbuildArgs = new Dictionary<string, object> {  // Pass additional arguments to esbuild\n            { \"--log-limit\", \"0\" },\n            { \"--splitting\", true } }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .minify(true) // minify code, defaults to false\n                .sourceMap(true) // include source map, defaults to false\n                .sourceMapMode(SourceMapMode.INLINE) // defaults to SourceMapMode.DEFAULT\n                .sourcesContent(false) // do not include original source into source map, defaults to true\n                .target(\"es2020\") // target environment for the generated JavaScript code\n                .loader(Map.of( // Use the 'dataurl' loader for '.png' files\n                        \".png\", \"dataurl\"))\n                .define(Map.of( // Replace strings during build time\n                        \"process.env.API_KEY\", JSON.stringify(\"xxx-xxxx-xxx\"),\n                        \"process.env.PRODUCTION\", JSON.stringify(true),\n                        \"process.env.NUMBER\", JSON.stringify(123)))\n                .logLevel(LogLevel.SILENT) // defaults to LogLevel.WARNING\n                .keepNames(true) // defaults to false\n                .tsconfig(\"custom-tsconfig.json\") // use custom-tsconfig.json instead of default,\n                .metafile(true) // include meta file, defaults to false\n                .banner(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .footer(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .charset(Charset.UTF8) // do not escape non-ASCII characters, defaults to Charset.ASCII\n                .format(OutputFormat.ESM) // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n                .mainFields(List.of(\"module\", \"main\")) // prefer ECMAScript versions of dependencies\n                .inject(List.of(\"./my-shim.js\", \"./other-shim.js\")) // allows to automatically replace a global variable with an import from another file\n                .esbuildArgs(Map.of( // Pass additional arguments to esbuild\n                        \"--log-limit\", \"0\",\n                        \"--splitting\", true))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tMinify: jsii.Boolean(true),\n\t\t // minify code, defaults to false\n\t\tSourceMap: jsii.Boolean(true),\n\t\t // include source map, defaults to false\n\t\tSourceMapMode: lambda.SourceMapMode_INLINE,\n\t\t // defaults to SourceMapMode.DEFAULT\n\t\tSourcesContent: jsii.Boolean(false),\n\t\t // do not include original source into source map, defaults to true\n\t\tTarget: jsii.String(\"es2020\"),\n\t\t // target environment for the generated JavaScript code\n\t\tLoader: map[string]*string{\n\t\t\t // Use the 'dataurl' loader for '.png' files\n\t\t\t\".png\": jsii.String(\"dataurl\"),\n\t\t},\n\t\tDefine: map[string]*string{\n\t\t\t // Replace strings during build time\n\t\t\t\"process.env.API_KEY\": JSON.stringify(jsii.String(\"xxx-xxxx-xxx\")),\n\t\t\t\"process.env.PRODUCTION\": JSON.stringify(jsii.Boolean(true)),\n\t\t\t\"process.env.NUMBER\": JSON.stringify(jsii.Number(123)),\n\t\t},\n\t\tLogLevel: lambda.LogLevel_SILENT,\n\t\t // defaults to LogLevel.WARNING\n\t\tKeepNames: jsii.Boolean(true),\n\t\t // defaults to false\n\t\tTsconfig: jsii.String(\"custom-tsconfig.json\"),\n\t\t // use custom-tsconfig.json instead of default,\n\t\tMetafile: jsii.Boolean(true),\n\t\t // include meta file, defaults to false\n\t\tBanner: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tFooter: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tCharset: lambda.Charset_UTF8,\n\t\t // do not escape non-ASCII characters, defaults to Charset.ASCII\n\t\tFormat: lambda.OutputFormat_ESM,\n\t\t // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n\t\tMainFields: []*string{\n\t\t\tjsii.String(\"module\"),\n\t\t\tjsii.String(\"main\"),\n\t\t},\n\t\t // prefer ECMAScript versions of dependencies\n\t\tInject: []*string{\n\t\t\tjsii.String(\"./my-shim.js\"),\n\t\t\tjsii.String(\"./other-shim.js\"),\n\t\t},\n\t\t // allows to automatically replace a global variable with an import from another file\n\t\tEsbuildArgs: map[string]interface{}{\n\t\t\t // Pass additional arguments to esbuild\n\t\t\t\"--log-limit\": jsii.String(\"0\"),\n\t\t\t\"--splitting\": jsii.Boolean(true),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":183}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.Charset","@aws-cdk/aws-lambda-nodejs.Charset#UTF8","@aws-cdk/aws-lambda-nodejs.LogLevel","@aws-cdk/aws-lambda-nodejs.LogLevel#SILENT","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/aws-lambda-nodejs.OutputFormat","@aws-cdk/aws-lambda-nodejs.OutputFormat#ESM","@aws-cdk/aws-lambda-nodejs.SourceMapMode","@aws-cdk/aws-lambda-nodejs.SourceMapMode#INLINE","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":18,"75":39,"91":1,"104":1,"106":6,"192":2,"193":5,"194":12,"196":3,"197":1,"226":1,"281":25},"fqnsFingerprint":"033ef64a2d5ec28750722dde98f4e265397dfcbc9d71a9561c9c85b9d07f996f"},"d6287a58281ca77238360861efc4ea6d8659872569ca4fde23fb9b1c09a98cd3":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        pre_compilation=True\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        PreCompilation = true\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .preCompilation(true)\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tPreCompilation: jsii.Boolean(true),\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    preCompilation: true,\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":265}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    preCompilation: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":4,"104":1,"106":1,"193":2,"194":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"c2dec9bd5395e8435270fc33757789c8832d08dc069f071474c31d6c55d74c22"},"3e0be6546e332e552ca10443f65806f05a916faf87bb8a6c454e768732feb106":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        environment={\n            \"NODE_ENV\": \"production\"\n        }\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        Environment = new Dictionary<string, string> {\n            { \"NODE_ENV\", \"production\" }\n        }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .environment(Map.of(\n                        \"NODE_ENV\", \"production\"))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tEnvironment: map[string]*string{\n\t\t\t\"NODE_ENV\": jsii.String(\"production\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    environment: {\n      NODE_ENV: 'production',\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":279}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    environment: {\n      NODE_ENV: 'production',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":5,"104":1,"193":3,"194":1,"197":1,"226":1,"281":3},"fqnsFingerprint":"c2dec9bd5395e8435270fc33757789c8832d08dc069f071474c31d6c55d74c22"},"813de0ec7c231a9b8c8e7d2f4438e3d60f4d68d6ca72a1ec14399f5823210996":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        build_args={\n            \"HTTPS_PROXY\": \"https://127.0.0.1:3001\"\n        }\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        BuildArgs = new Dictionary<string, string> {\n            { \"HTTPS_PROXY\", \"https://127.0.0.1:3001\" }\n        }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .buildArgs(Map.of(\n                        \"HTTPS_PROXY\", \"https://127.0.0.1:3001\"))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tBuildArgs: map[string]*string{\n\t\t\t\"HTTPS_PROXY\": jsii.String(\"https://127.0.0.1:3001\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    buildArgs: {\n      HTTPS_PROXY: 'https://127.0.0.1:3001',\n    },\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":291}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    buildArgs: {\n      HTTPS_PROXY: 'https://127.0.0.1:3001',\n    },\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":5,"104":1,"193":3,"194":1,"197":1,"226":1,"281":3},"fqnsFingerprint":"c2dec9bd5395e8435270fc33757789c8832d08dc069f071474c31d6c55d74c22"},"2c23524c9a6b382ca6e8804e68dd9db84675ad4d56d5fbc6eec1e7ff2f93e26a":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        docker_image=DockerImage.from_build(\"/path/to/Dockerfile\")\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        DockerImage = DockerImage.FromBuild(\"/path/to/Dockerfile\")\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .dockerImage(DockerImage.fromBuild(\"/path/to/Dockerfile\"))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tDockerImage: awscdkcore.DockerImage_FromBuild(jsii.String(\"/path/to/Dockerfile\")),\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":303}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct","@aws-cdk/core.DockerImage","@aws-cdk/core.DockerImage#fromBuild"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":6,"104":1,"193":2,"194":2,"196":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"65dcc8211b1294e7f493ad89c3d30229bd1a855e958276e4ad2ba4708d0b1bea"},"27f3a945d8708c15735ec4cc2e01d2da79e46d6b777dc18d15b040c01b152db8":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        asset_hash=\"my-custom-hash\"\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        AssetHash = \"my-custom-hash\"\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .assetHash(\"my-custom-hash\")\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tAssetHash: jsii.String(\"my-custom-hash\"),\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    assetHash: 'my-custom-hash',\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-nodejs"},"field":{"field":"markdown","line":323}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    assetHash: 'my-custom-hash',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":4,"104":1,"193":2,"194":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"c2dec9bd5395e8435270fc33757789c8832d08dc069f071474c31d6c55d74c22"},"66190e268c58d0f7b8662f267c7e7e8e52ca9bc4b1ee12a2b12bb373044e9af8":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        docker_image=DockerImage.from_build(\"/path/to/Dockerfile\")\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        DockerImage = DockerImage.FromBuild(\"/path/to/Dockerfile\")\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .dockerImage(DockerImage.fromBuild(\"/path/to/Dockerfile\"))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tDockerImage: awscdkcore.DockerImage_FromBuild(jsii.String(\"/path/to/Dockerfile\")),\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-nodejs.BundlingOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct","@aws-cdk/core.DockerImage","@aws-cdk/core.DockerImage#fromBuild"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":6,"104":1,"193":2,"194":2,"196":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"65dcc8211b1294e7f493ad89c3d30229bd1a855e958276e4ad2ba4708d0b1bea"},"f41ae0e618f1a3c63ac1e483e7fdd7ad9b54e2464eed4a1c5fc50be1f94b4e01":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        minify=True,  # minify code, defaults to false\n        source_map=True,  # include source map, defaults to false\n        source_map_mode=lambda_.SourceMapMode.INLINE,  # defaults to SourceMapMode.DEFAULT\n        sources_content=False,  # do not include original source into source map, defaults to true\n        target=\"es2020\",  # target environment for the generated JavaScript code\n        loader={ # Use the 'dataurl' loader for '.png' files\n            \".png\": \"dataurl\"},\n        define={ # Replace strings during build time\n            \"process.env.API_KEY\": JSON.stringify(\"xxx-xxxx-xxx\"),\n            \"process.env.PRODUCTION\": JSON.stringify(True),\n            \"process.env.NUMBER\": JSON.stringify(123)},\n        log_level=lambda_.LogLevel.SILENT,  # defaults to LogLevel.WARNING\n        keep_names=True,  # defaults to false\n        tsconfig=\"custom-tsconfig.json\",  # use custom-tsconfig.json instead of default,\n        metafile=True,  # include meta file, defaults to false\n        banner=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        footer=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        charset=lambda_.Charset.UTF8,  # do not escape non-ASCII characters, defaults to Charset.ASCII\n        format=lambda_.OutputFormat.ESM,  # ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        main_fields=[\"module\", \"main\"],  # prefer ECMAScript versions of dependencies\n        inject=[\"./my-shim.js\", \"./other-shim.js\"],  # allows to automatically replace a global variable with an import from another file\n        esbuild_args={ # Pass additional arguments to esbuild\n            \"--log-limit\": \"0\",\n            \"--splitting\": True}\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        Minify = true,  // minify code, defaults to false\n        SourceMap = true,  // include source map, defaults to false\n        SourceMapMode = SourceMapMode.INLINE,  // defaults to SourceMapMode.DEFAULT\n        SourcesContent = false,  // do not include original source into source map, defaults to true\n        Target = \"es2020\",  // target environment for the generated JavaScript code\n        Loader = new Dictionary<string, string> {  // Use the 'dataurl' loader for '.png' files\n            { \".png\", \"dataurl\" } },\n        Define = new Dictionary<string, string> {  // Replace strings during build time\n            { \"process.env.API_KEY\", JSON.Stringify(\"xxx-xxxx-xxx\") },\n            { \"process.env.PRODUCTION\", JSON.Stringify(true) },\n            { \"process.env.NUMBER\", JSON.Stringify(123) } },\n        LogLevel = LogLevel.SILENT,  // defaults to LogLevel.WARNING\n        KeepNames = true,  // defaults to false\n        Tsconfig = \"custom-tsconfig.json\",  // use custom-tsconfig.json instead of default,\n        Metafile = true,  // include meta file, defaults to false\n        Banner = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Footer = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Charset = Charset.UTF8,  // do not escape non-ASCII characters, defaults to Charset.ASCII\n        Format = OutputFormat.ESM,  // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        MainFields = new [] { \"module\", \"main\" },  // prefer ECMAScript versions of dependencies\n        Inject = new [] { \"./my-shim.js\", \"./other-shim.js\" },  // allows to automatically replace a global variable with an import from another file\n        EsbuildArgs = new Dictionary<string, object> {  // Pass additional arguments to esbuild\n            { \"--log-limit\", \"0\" },\n            { \"--splitting\", true } }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .minify(true) // minify code, defaults to false\n                .sourceMap(true) // include source map, defaults to false\n                .sourceMapMode(SourceMapMode.INLINE) // defaults to SourceMapMode.DEFAULT\n                .sourcesContent(false) // do not include original source into source map, defaults to true\n                .target(\"es2020\") // target environment for the generated JavaScript code\n                .loader(Map.of( // Use the 'dataurl' loader for '.png' files\n                        \".png\", \"dataurl\"))\n                .define(Map.of( // Replace strings during build time\n                        \"process.env.API_KEY\", JSON.stringify(\"xxx-xxxx-xxx\"),\n                        \"process.env.PRODUCTION\", JSON.stringify(true),\n                        \"process.env.NUMBER\", JSON.stringify(123)))\n                .logLevel(LogLevel.SILENT) // defaults to LogLevel.WARNING\n                .keepNames(true) // defaults to false\n                .tsconfig(\"custom-tsconfig.json\") // use custom-tsconfig.json instead of default,\n                .metafile(true) // include meta file, defaults to false\n                .banner(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .footer(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .charset(Charset.UTF8) // do not escape non-ASCII characters, defaults to Charset.ASCII\n                .format(OutputFormat.ESM) // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n                .mainFields(List.of(\"module\", \"main\")) // prefer ECMAScript versions of dependencies\n                .inject(List.of(\"./my-shim.js\", \"./other-shim.js\")) // allows to automatically replace a global variable with an import from another file\n                .esbuildArgs(Map.of( // Pass additional arguments to esbuild\n                        \"--log-limit\", \"0\",\n                        \"--splitting\", true))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tMinify: jsii.Boolean(true),\n\t\t // minify code, defaults to false\n\t\tSourceMap: jsii.Boolean(true),\n\t\t // include source map, defaults to false\n\t\tSourceMapMode: lambda.SourceMapMode_INLINE,\n\t\t // defaults to SourceMapMode.DEFAULT\n\t\tSourcesContent: jsii.Boolean(false),\n\t\t // do not include original source into source map, defaults to true\n\t\tTarget: jsii.String(\"es2020\"),\n\t\t // target environment for the generated JavaScript code\n\t\tLoader: map[string]*string{\n\t\t\t // Use the 'dataurl' loader for '.png' files\n\t\t\t\".png\": jsii.String(\"dataurl\"),\n\t\t},\n\t\tDefine: map[string]*string{\n\t\t\t // Replace strings during build time\n\t\t\t\"process.env.API_KEY\": JSON.stringify(jsii.String(\"xxx-xxxx-xxx\")),\n\t\t\t\"process.env.PRODUCTION\": JSON.stringify(jsii.Boolean(true)),\n\t\t\t\"process.env.NUMBER\": JSON.stringify(jsii.Number(123)),\n\t\t},\n\t\tLogLevel: lambda.LogLevel_SILENT,\n\t\t // defaults to LogLevel.WARNING\n\t\tKeepNames: jsii.Boolean(true),\n\t\t // defaults to false\n\t\tTsconfig: jsii.String(\"custom-tsconfig.json\"),\n\t\t // use custom-tsconfig.json instead of default,\n\t\tMetafile: jsii.Boolean(true),\n\t\t // include meta file, defaults to false\n\t\tBanner: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tFooter: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tCharset: lambda.Charset_UTF8,\n\t\t // do not escape non-ASCII characters, defaults to Charset.ASCII\n\t\tFormat: lambda.OutputFormat_ESM,\n\t\t // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n\t\tMainFields: []*string{\n\t\t\tjsii.String(\"module\"),\n\t\t\tjsii.String(\"main\"),\n\t\t},\n\t\t // prefer ECMAScript versions of dependencies\n\t\tInject: []*string{\n\t\t\tjsii.String(\"./my-shim.js\"),\n\t\t\tjsii.String(\"./other-shim.js\"),\n\t\t},\n\t\t // allows to automatically replace a global variable with an import from another file\n\t\tEsbuildArgs: map[string]interface{}{\n\t\t\t // Pass additional arguments to esbuild\n\t\t\t\"--log-limit\": jsii.String(\"0\"),\n\t\t\t\"--splitting\": jsii.Boolean(true),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-nodejs.Charset"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.Charset","@aws-cdk/aws-lambda-nodejs.Charset#UTF8","@aws-cdk/aws-lambda-nodejs.LogLevel","@aws-cdk/aws-lambda-nodejs.LogLevel#SILENT","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/aws-lambda-nodejs.OutputFormat","@aws-cdk/aws-lambda-nodejs.OutputFormat#ESM","@aws-cdk/aws-lambda-nodejs.SourceMapMode","@aws-cdk/aws-lambda-nodejs.SourceMapMode#INLINE","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":18,"75":39,"91":1,"104":1,"106":6,"192":2,"193":5,"194":12,"196":3,"197":1,"226":1,"281":25},"fqnsFingerprint":"033ef64a2d5ec28750722dde98f4e265397dfcbc9d71a9561c9c85b9d07f996f"},"e48b2d88610a92f69cefc672b518a290f8b7c9a9539298ab321d548f17850d7d":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        minify=True,  # minify code, defaults to false\n        source_map=True,  # include source map, defaults to false\n        source_map_mode=lambda_.SourceMapMode.INLINE,  # defaults to SourceMapMode.DEFAULT\n        sources_content=False,  # do not include original source into source map, defaults to true\n        target=\"es2020\",  # target environment for the generated JavaScript code\n        loader={ # Use the 'dataurl' loader for '.png' files\n            \".png\": \"dataurl\"},\n        define={ # Replace strings during build time\n            \"process.env.API_KEY\": JSON.stringify(\"xxx-xxxx-xxx\"),\n            \"process.env.PRODUCTION\": JSON.stringify(True),\n            \"process.env.NUMBER\": JSON.stringify(123)},\n        log_level=lambda_.LogLevel.SILENT,  # defaults to LogLevel.WARNING\n        keep_names=True,  # defaults to false\n        tsconfig=\"custom-tsconfig.json\",  # use custom-tsconfig.json instead of default,\n        metafile=True,  # include meta file, defaults to false\n        banner=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        footer=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        charset=lambda_.Charset.UTF8,  # do not escape non-ASCII characters, defaults to Charset.ASCII\n        format=lambda_.OutputFormat.ESM,  # ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        main_fields=[\"module\", \"main\"],  # prefer ECMAScript versions of dependencies\n        inject=[\"./my-shim.js\", \"./other-shim.js\"],  # allows to automatically replace a global variable with an import from another file\n        esbuild_args={ # Pass additional arguments to esbuild\n            \"--log-limit\": \"0\",\n            \"--splitting\": True}\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        Minify = true,  // minify code, defaults to false\n        SourceMap = true,  // include source map, defaults to false\n        SourceMapMode = SourceMapMode.INLINE,  // defaults to SourceMapMode.DEFAULT\n        SourcesContent = false,  // do not include original source into source map, defaults to true\n        Target = \"es2020\",  // target environment for the generated JavaScript code\n        Loader = new Dictionary<string, string> {  // Use the 'dataurl' loader for '.png' files\n            { \".png\", \"dataurl\" } },\n        Define = new Dictionary<string, string> {  // Replace strings during build time\n            { \"process.env.API_KEY\", JSON.Stringify(\"xxx-xxxx-xxx\") },\n            { \"process.env.PRODUCTION\", JSON.Stringify(true) },\n            { \"process.env.NUMBER\", JSON.Stringify(123) } },\n        LogLevel = LogLevel.SILENT,  // defaults to LogLevel.WARNING\n        KeepNames = true,  // defaults to false\n        Tsconfig = \"custom-tsconfig.json\",  // use custom-tsconfig.json instead of default,\n        Metafile = true,  // include meta file, defaults to false\n        Banner = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Footer = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Charset = Charset.UTF8,  // do not escape non-ASCII characters, defaults to Charset.ASCII\n        Format = OutputFormat.ESM,  // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        MainFields = new [] { \"module\", \"main\" },  // prefer ECMAScript versions of dependencies\n        Inject = new [] { \"./my-shim.js\", \"./other-shim.js\" },  // allows to automatically replace a global variable with an import from another file\n        EsbuildArgs = new Dictionary<string, object> {  // Pass additional arguments to esbuild\n            { \"--log-limit\", \"0\" },\n            { \"--splitting\", true } }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .minify(true) // minify code, defaults to false\n                .sourceMap(true) // include source map, defaults to false\n                .sourceMapMode(SourceMapMode.INLINE) // defaults to SourceMapMode.DEFAULT\n                .sourcesContent(false) // do not include original source into source map, defaults to true\n                .target(\"es2020\") // target environment for the generated JavaScript code\n                .loader(Map.of( // Use the 'dataurl' loader for '.png' files\n                        \".png\", \"dataurl\"))\n                .define(Map.of( // Replace strings during build time\n                        \"process.env.API_KEY\", JSON.stringify(\"xxx-xxxx-xxx\"),\n                        \"process.env.PRODUCTION\", JSON.stringify(true),\n                        \"process.env.NUMBER\", JSON.stringify(123)))\n                .logLevel(LogLevel.SILENT) // defaults to LogLevel.WARNING\n                .keepNames(true) // defaults to false\n                .tsconfig(\"custom-tsconfig.json\") // use custom-tsconfig.json instead of default,\n                .metafile(true) // include meta file, defaults to false\n                .banner(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .footer(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .charset(Charset.UTF8) // do not escape non-ASCII characters, defaults to Charset.ASCII\n                .format(OutputFormat.ESM) // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n                .mainFields(List.of(\"module\", \"main\")) // prefer ECMAScript versions of dependencies\n                .inject(List.of(\"./my-shim.js\", \"./other-shim.js\")) // allows to automatically replace a global variable with an import from another file\n                .esbuildArgs(Map.of( // Pass additional arguments to esbuild\n                        \"--log-limit\", \"0\",\n                        \"--splitting\", true))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tMinify: jsii.Boolean(true),\n\t\t // minify code, defaults to false\n\t\tSourceMap: jsii.Boolean(true),\n\t\t // include source map, defaults to false\n\t\tSourceMapMode: lambda.SourceMapMode_INLINE,\n\t\t // defaults to SourceMapMode.DEFAULT\n\t\tSourcesContent: jsii.Boolean(false),\n\t\t // do not include original source into source map, defaults to true\n\t\tTarget: jsii.String(\"es2020\"),\n\t\t // target environment for the generated JavaScript code\n\t\tLoader: map[string]*string{\n\t\t\t // Use the 'dataurl' loader for '.png' files\n\t\t\t\".png\": jsii.String(\"dataurl\"),\n\t\t},\n\t\tDefine: map[string]*string{\n\t\t\t // Replace strings during build time\n\t\t\t\"process.env.API_KEY\": JSON.stringify(jsii.String(\"xxx-xxxx-xxx\")),\n\t\t\t\"process.env.PRODUCTION\": JSON.stringify(jsii.Boolean(true)),\n\t\t\t\"process.env.NUMBER\": JSON.stringify(jsii.Number(123)),\n\t\t},\n\t\tLogLevel: lambda.LogLevel_SILENT,\n\t\t // defaults to LogLevel.WARNING\n\t\tKeepNames: jsii.Boolean(true),\n\t\t // defaults to false\n\t\tTsconfig: jsii.String(\"custom-tsconfig.json\"),\n\t\t // use custom-tsconfig.json instead of default,\n\t\tMetafile: jsii.Boolean(true),\n\t\t // include meta file, defaults to false\n\t\tBanner: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tFooter: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tCharset: lambda.Charset_UTF8,\n\t\t // do not escape non-ASCII characters, defaults to Charset.ASCII\n\t\tFormat: lambda.OutputFormat_ESM,\n\t\t // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n\t\tMainFields: []*string{\n\t\t\tjsii.String(\"module\"),\n\t\t\tjsii.String(\"main\"),\n\t\t},\n\t\t // prefer ECMAScript versions of dependencies\n\t\tInject: []*string{\n\t\t\tjsii.String(\"./my-shim.js\"),\n\t\t\tjsii.String(\"./other-shim.js\"),\n\t\t},\n\t\t // allows to automatically replace a global variable with an import from another file\n\t\tEsbuildArgs: map[string]interface{}{\n\t\t\t // Pass additional arguments to esbuild\n\t\t\t\"--log-limit\": jsii.String(\"0\"),\n\t\t\t\"--splitting\": jsii.Boolean(true),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-nodejs.LogLevel"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.Charset","@aws-cdk/aws-lambda-nodejs.Charset#UTF8","@aws-cdk/aws-lambda-nodejs.LogLevel","@aws-cdk/aws-lambda-nodejs.LogLevel#SILENT","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/aws-lambda-nodejs.OutputFormat","@aws-cdk/aws-lambda-nodejs.OutputFormat#ESM","@aws-cdk/aws-lambda-nodejs.SourceMapMode","@aws-cdk/aws-lambda-nodejs.SourceMapMode#INLINE","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":18,"75":39,"91":1,"104":1,"106":6,"192":2,"193":5,"194":12,"196":3,"197":1,"226":1,"281":25},"fqnsFingerprint":"033ef64a2d5ec28750722dde98f4e265397dfcbc9d71a9561c9c85b9d07f996f"},"19e1ea2518d64375bd92cdf630d517f8b52946cdca629641485ad8ce5e63f5a6":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        docker_image=DockerImage.from_build(\"/path/to/Dockerfile\")\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        DockerImage = DockerImage.FromBuild(\"/path/to/Dockerfile\")\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .dockerImage(DockerImage.fromBuild(\"/path/to/Dockerfile\"))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tDockerImage: awscdkcore.DockerImage_FromBuild(jsii.String(\"/path/to/Dockerfile\")),\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-nodejs.NodejsFunction"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/core.Construct","@aws-cdk/core.DockerImage","@aws-cdk/core.DockerImage#fromBuild"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":6,"104":1,"193":2,"194":2,"196":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"65dcc8211b1294e7f493ad89c3d30229bd1a855e958276e4ad2ba4708d0b1bea"},"8b7ff9c537a6cdc4399ac976fde75c90dda1b74b10cbba2742ed524dd1bf9f90":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        minify=True,  # minify code, defaults to false\n        source_map=True,  # include source map, defaults to false\n        source_map_mode=lambda_.SourceMapMode.INLINE,  # defaults to SourceMapMode.DEFAULT\n        sources_content=False,  # do not include original source into source map, defaults to true\n        target=\"es2020\",  # target environment for the generated JavaScript code\n        loader={ # Use the 'dataurl' loader for '.png' files\n            \".png\": \"dataurl\"},\n        define={ # Replace strings during build time\n            \"process.env.API_KEY\": JSON.stringify(\"xxx-xxxx-xxx\"),\n            \"process.env.PRODUCTION\": JSON.stringify(True),\n            \"process.env.NUMBER\": JSON.stringify(123)},\n        log_level=lambda_.LogLevel.SILENT,  # defaults to LogLevel.WARNING\n        keep_names=True,  # defaults to false\n        tsconfig=\"custom-tsconfig.json\",  # use custom-tsconfig.json instead of default,\n        metafile=True,  # include meta file, defaults to false\n        banner=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        footer=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        charset=lambda_.Charset.UTF8,  # do not escape non-ASCII characters, defaults to Charset.ASCII\n        format=lambda_.OutputFormat.ESM,  # ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        main_fields=[\"module\", \"main\"],  # prefer ECMAScript versions of dependencies\n        inject=[\"./my-shim.js\", \"./other-shim.js\"],  # allows to automatically replace a global variable with an import from another file\n        esbuild_args={ # Pass additional arguments to esbuild\n            \"--log-limit\": \"0\",\n            \"--splitting\": True}\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        Minify = true,  // minify code, defaults to false\n        SourceMap = true,  // include source map, defaults to false\n        SourceMapMode = SourceMapMode.INLINE,  // defaults to SourceMapMode.DEFAULT\n        SourcesContent = false,  // do not include original source into source map, defaults to true\n        Target = \"es2020\",  // target environment for the generated JavaScript code\n        Loader = new Dictionary<string, string> {  // Use the 'dataurl' loader for '.png' files\n            { \".png\", \"dataurl\" } },\n        Define = new Dictionary<string, string> {  // Replace strings during build time\n            { \"process.env.API_KEY\", JSON.Stringify(\"xxx-xxxx-xxx\") },\n            { \"process.env.PRODUCTION\", JSON.Stringify(true) },\n            { \"process.env.NUMBER\", JSON.Stringify(123) } },\n        LogLevel = LogLevel.SILENT,  // defaults to LogLevel.WARNING\n        KeepNames = true,  // defaults to false\n        Tsconfig = \"custom-tsconfig.json\",  // use custom-tsconfig.json instead of default,\n        Metafile = true,  // include meta file, defaults to false\n        Banner = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Footer = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Charset = Charset.UTF8,  // do not escape non-ASCII characters, defaults to Charset.ASCII\n        Format = OutputFormat.ESM,  // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        MainFields = new [] { \"module\", \"main\" },  // prefer ECMAScript versions of dependencies\n        Inject = new [] { \"./my-shim.js\", \"./other-shim.js\" },  // allows to automatically replace a global variable with an import from another file\n        EsbuildArgs = new Dictionary<string, object> {  // Pass additional arguments to esbuild\n            { \"--log-limit\", \"0\" },\n            { \"--splitting\", true } }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .minify(true) // minify code, defaults to false\n                .sourceMap(true) // include source map, defaults to false\n                .sourceMapMode(SourceMapMode.INLINE) // defaults to SourceMapMode.DEFAULT\n                .sourcesContent(false) // do not include original source into source map, defaults to true\n                .target(\"es2020\") // target environment for the generated JavaScript code\n                .loader(Map.of( // Use the 'dataurl' loader for '.png' files\n                        \".png\", \"dataurl\"))\n                .define(Map.of( // Replace strings during build time\n                        \"process.env.API_KEY\", JSON.stringify(\"xxx-xxxx-xxx\"),\n                        \"process.env.PRODUCTION\", JSON.stringify(true),\n                        \"process.env.NUMBER\", JSON.stringify(123)))\n                .logLevel(LogLevel.SILENT) // defaults to LogLevel.WARNING\n                .keepNames(true) // defaults to false\n                .tsconfig(\"custom-tsconfig.json\") // use custom-tsconfig.json instead of default,\n                .metafile(true) // include meta file, defaults to false\n                .banner(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .footer(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .charset(Charset.UTF8) // do not escape non-ASCII characters, defaults to Charset.ASCII\n                .format(OutputFormat.ESM) // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n                .mainFields(List.of(\"module\", \"main\")) // prefer ECMAScript versions of dependencies\n                .inject(List.of(\"./my-shim.js\", \"./other-shim.js\")) // allows to automatically replace a global variable with an import from another file\n                .esbuildArgs(Map.of( // Pass additional arguments to esbuild\n                        \"--log-limit\", \"0\",\n                        \"--splitting\", true))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tMinify: jsii.Boolean(true),\n\t\t // minify code, defaults to false\n\t\tSourceMap: jsii.Boolean(true),\n\t\t // include source map, defaults to false\n\t\tSourceMapMode: lambda.SourceMapMode_INLINE,\n\t\t // defaults to SourceMapMode.DEFAULT\n\t\tSourcesContent: jsii.Boolean(false),\n\t\t // do not include original source into source map, defaults to true\n\t\tTarget: jsii.String(\"es2020\"),\n\t\t // target environment for the generated JavaScript code\n\t\tLoader: map[string]*string{\n\t\t\t // Use the 'dataurl' loader for '.png' files\n\t\t\t\".png\": jsii.String(\"dataurl\"),\n\t\t},\n\t\tDefine: map[string]*string{\n\t\t\t // Replace strings during build time\n\t\t\t\"process.env.API_KEY\": JSON.stringify(jsii.String(\"xxx-xxxx-xxx\")),\n\t\t\t\"process.env.PRODUCTION\": JSON.stringify(jsii.Boolean(true)),\n\t\t\t\"process.env.NUMBER\": JSON.stringify(jsii.Number(123)),\n\t\t},\n\t\tLogLevel: lambda.LogLevel_SILENT,\n\t\t // defaults to LogLevel.WARNING\n\t\tKeepNames: jsii.Boolean(true),\n\t\t // defaults to false\n\t\tTsconfig: jsii.String(\"custom-tsconfig.json\"),\n\t\t // use custom-tsconfig.json instead of default,\n\t\tMetafile: jsii.Boolean(true),\n\t\t // include meta file, defaults to false\n\t\tBanner: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tFooter: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tCharset: lambda.Charset_UTF8,\n\t\t // do not escape non-ASCII characters, defaults to Charset.ASCII\n\t\tFormat: lambda.OutputFormat_ESM,\n\t\t // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n\t\tMainFields: []*string{\n\t\t\tjsii.String(\"module\"),\n\t\t\tjsii.String(\"main\"),\n\t\t},\n\t\t // prefer ECMAScript versions of dependencies\n\t\tInject: []*string{\n\t\t\tjsii.String(\"./my-shim.js\"),\n\t\t\tjsii.String(\"./other-shim.js\"),\n\t\t},\n\t\t // allows to automatically replace a global variable with an import from another file\n\t\tEsbuildArgs: map[string]interface{}{\n\t\t\t // Pass additional arguments to esbuild\n\t\t\t\"--log-limit\": jsii.String(\"0\"),\n\t\t\t\"--splitting\": jsii.Boolean(true),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.Charset","@aws-cdk/aws-lambda-nodejs.Charset#UTF8","@aws-cdk/aws-lambda-nodejs.LogLevel","@aws-cdk/aws-lambda-nodejs.LogLevel#SILENT","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/aws-lambda-nodejs.OutputFormat","@aws-cdk/aws-lambda-nodejs.OutputFormat#ESM","@aws-cdk/aws-lambda-nodejs.SourceMapMode","@aws-cdk/aws-lambda-nodejs.SourceMapMode#INLINE","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":18,"75":39,"91":1,"104":1,"106":6,"192":2,"193":5,"194":12,"196":3,"197":1,"226":1,"281":25},"fqnsFingerprint":"033ef64a2d5ec28750722dde98f4e265397dfcbc9d71a9561c9c85b9d07f996f"},"38f559234ecdde256f0fb2212b87e41b32ac97de700ef9d8164df31ee915632f":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        minify=True,  # minify code, defaults to false\n        source_map=True,  # include source map, defaults to false\n        source_map_mode=lambda_.SourceMapMode.INLINE,  # defaults to SourceMapMode.DEFAULT\n        sources_content=False,  # do not include original source into source map, defaults to true\n        target=\"es2020\",  # target environment for the generated JavaScript code\n        loader={ # Use the 'dataurl' loader for '.png' files\n            \".png\": \"dataurl\"},\n        define={ # Replace strings during build time\n            \"process.env.API_KEY\": JSON.stringify(\"xxx-xxxx-xxx\"),\n            \"process.env.PRODUCTION\": JSON.stringify(True),\n            \"process.env.NUMBER\": JSON.stringify(123)},\n        log_level=lambda_.LogLevel.SILENT,  # defaults to LogLevel.WARNING\n        keep_names=True,  # defaults to false\n        tsconfig=\"custom-tsconfig.json\",  # use custom-tsconfig.json instead of default,\n        metafile=True,  # include meta file, defaults to false\n        banner=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        footer=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        charset=lambda_.Charset.UTF8,  # do not escape non-ASCII characters, defaults to Charset.ASCII\n        format=lambda_.OutputFormat.ESM,  # ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        main_fields=[\"module\", \"main\"],  # prefer ECMAScript versions of dependencies\n        inject=[\"./my-shim.js\", \"./other-shim.js\"],  # allows to automatically replace a global variable with an import from another file\n        esbuild_args={ # Pass additional arguments to esbuild\n            \"--log-limit\": \"0\",\n            \"--splitting\": True}\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        Minify = true,  // minify code, defaults to false\n        SourceMap = true,  // include source map, defaults to false\n        SourceMapMode = SourceMapMode.INLINE,  // defaults to SourceMapMode.DEFAULT\n        SourcesContent = false,  // do not include original source into source map, defaults to true\n        Target = \"es2020\",  // target environment for the generated JavaScript code\n        Loader = new Dictionary<string, string> {  // Use the 'dataurl' loader for '.png' files\n            { \".png\", \"dataurl\" } },\n        Define = new Dictionary<string, string> {  // Replace strings during build time\n            { \"process.env.API_KEY\", JSON.Stringify(\"xxx-xxxx-xxx\") },\n            { \"process.env.PRODUCTION\", JSON.Stringify(true) },\n            { \"process.env.NUMBER\", JSON.Stringify(123) } },\n        LogLevel = LogLevel.SILENT,  // defaults to LogLevel.WARNING\n        KeepNames = true,  // defaults to false\n        Tsconfig = \"custom-tsconfig.json\",  // use custom-tsconfig.json instead of default,\n        Metafile = true,  // include meta file, defaults to false\n        Banner = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Footer = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Charset = Charset.UTF8,  // do not escape non-ASCII characters, defaults to Charset.ASCII\n        Format = OutputFormat.ESM,  // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        MainFields = new [] { \"module\", \"main\" },  // prefer ECMAScript versions of dependencies\n        Inject = new [] { \"./my-shim.js\", \"./other-shim.js\" },  // allows to automatically replace a global variable with an import from another file\n        EsbuildArgs = new Dictionary<string, object> {  // Pass additional arguments to esbuild\n            { \"--log-limit\", \"0\" },\n            { \"--splitting\", true } }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .minify(true) // minify code, defaults to false\n                .sourceMap(true) // include source map, defaults to false\n                .sourceMapMode(SourceMapMode.INLINE) // defaults to SourceMapMode.DEFAULT\n                .sourcesContent(false) // do not include original source into source map, defaults to true\n                .target(\"es2020\") // target environment for the generated JavaScript code\n                .loader(Map.of( // Use the 'dataurl' loader for '.png' files\n                        \".png\", \"dataurl\"))\n                .define(Map.of( // Replace strings during build time\n                        \"process.env.API_KEY\", JSON.stringify(\"xxx-xxxx-xxx\"),\n                        \"process.env.PRODUCTION\", JSON.stringify(true),\n                        \"process.env.NUMBER\", JSON.stringify(123)))\n                .logLevel(LogLevel.SILENT) // defaults to LogLevel.WARNING\n                .keepNames(true) // defaults to false\n                .tsconfig(\"custom-tsconfig.json\") // use custom-tsconfig.json instead of default,\n                .metafile(true) // include meta file, defaults to false\n                .banner(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .footer(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .charset(Charset.UTF8) // do not escape non-ASCII characters, defaults to Charset.ASCII\n                .format(OutputFormat.ESM) // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n                .mainFields(List.of(\"module\", \"main\")) // prefer ECMAScript versions of dependencies\n                .inject(List.of(\"./my-shim.js\", \"./other-shim.js\")) // allows to automatically replace a global variable with an import from another file\n                .esbuildArgs(Map.of( // Pass additional arguments to esbuild\n                        \"--log-limit\", \"0\",\n                        \"--splitting\", true))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tMinify: jsii.Boolean(true),\n\t\t // minify code, defaults to false\n\t\tSourceMap: jsii.Boolean(true),\n\t\t // include source map, defaults to false\n\t\tSourceMapMode: lambda.SourceMapMode_INLINE,\n\t\t // defaults to SourceMapMode.DEFAULT\n\t\tSourcesContent: jsii.Boolean(false),\n\t\t // do not include original source into source map, defaults to true\n\t\tTarget: jsii.String(\"es2020\"),\n\t\t // target environment for the generated JavaScript code\n\t\tLoader: map[string]*string{\n\t\t\t // Use the 'dataurl' loader for '.png' files\n\t\t\t\".png\": jsii.String(\"dataurl\"),\n\t\t},\n\t\tDefine: map[string]*string{\n\t\t\t // Replace strings during build time\n\t\t\t\"process.env.API_KEY\": JSON.stringify(jsii.String(\"xxx-xxxx-xxx\")),\n\t\t\t\"process.env.PRODUCTION\": JSON.stringify(jsii.Boolean(true)),\n\t\t\t\"process.env.NUMBER\": JSON.stringify(jsii.Number(123)),\n\t\t},\n\t\tLogLevel: lambda.LogLevel_SILENT,\n\t\t // defaults to LogLevel.WARNING\n\t\tKeepNames: jsii.Boolean(true),\n\t\t // defaults to false\n\t\tTsconfig: jsii.String(\"custom-tsconfig.json\"),\n\t\t // use custom-tsconfig.json instead of default,\n\t\tMetafile: jsii.Boolean(true),\n\t\t // include meta file, defaults to false\n\t\tBanner: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tFooter: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tCharset: lambda.Charset_UTF8,\n\t\t // do not escape non-ASCII characters, defaults to Charset.ASCII\n\t\tFormat: lambda.OutputFormat_ESM,\n\t\t // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n\t\tMainFields: []*string{\n\t\t\tjsii.String(\"module\"),\n\t\t\tjsii.String(\"main\"),\n\t\t},\n\t\t // prefer ECMAScript versions of dependencies\n\t\tInject: []*string{\n\t\t\tjsii.String(\"./my-shim.js\"),\n\t\t\tjsii.String(\"./other-shim.js\"),\n\t\t},\n\t\t // allows to automatically replace a global variable with an import from another file\n\t\tEsbuildArgs: map[string]interface{}{\n\t\t\t // Pass additional arguments to esbuild\n\t\t\t\"--log-limit\": jsii.String(\"0\"),\n\t\t\t\"--splitting\": jsii.Boolean(true),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-nodejs.OutputFormat"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.Charset","@aws-cdk/aws-lambda-nodejs.Charset#UTF8","@aws-cdk/aws-lambda-nodejs.LogLevel","@aws-cdk/aws-lambda-nodejs.LogLevel#SILENT","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/aws-lambda-nodejs.OutputFormat","@aws-cdk/aws-lambda-nodejs.OutputFormat#ESM","@aws-cdk/aws-lambda-nodejs.SourceMapMode","@aws-cdk/aws-lambda-nodejs.SourceMapMode#INLINE","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":18,"75":39,"91":1,"104":1,"106":6,"192":2,"193":5,"194":12,"196":3,"197":1,"226":1,"281":25},"fqnsFingerprint":"033ef64a2d5ec28750722dde98f4e265397dfcbc9d71a9561c9c85b9d07f996f"},"e132821afc51a463837d32c3f079905ba5eac62007f0645f948819b0ed86a782":{"translations":{"python":{"source":"lambda_.NodejsFunction(self, \"my-handler\",\n    bundling=lambda.BundlingOptions(\n        minify=True,  # minify code, defaults to false\n        source_map=True,  # include source map, defaults to false\n        source_map_mode=lambda_.SourceMapMode.INLINE,  # defaults to SourceMapMode.DEFAULT\n        sources_content=False,  # do not include original source into source map, defaults to true\n        target=\"es2020\",  # target environment for the generated JavaScript code\n        loader={ # Use the 'dataurl' loader for '.png' files\n            \".png\": \"dataurl\"},\n        define={ # Replace strings during build time\n            \"process.env.API_KEY\": JSON.stringify(\"xxx-xxxx-xxx\"),\n            \"process.env.PRODUCTION\": JSON.stringify(True),\n            \"process.env.NUMBER\": JSON.stringify(123)},\n        log_level=lambda_.LogLevel.SILENT,  # defaults to LogLevel.WARNING\n        keep_names=True,  # defaults to false\n        tsconfig=\"custom-tsconfig.json\",  # use custom-tsconfig.json instead of default,\n        metafile=True,  # include meta file, defaults to false\n        banner=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        footer=\"/* comments */\",  # requires esbuild >= 0.9.0, defaults to none\n        charset=lambda_.Charset.UTF8,  # do not escape non-ASCII characters, defaults to Charset.ASCII\n        format=lambda_.OutputFormat.ESM,  # ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        main_fields=[\"module\", \"main\"],  # prefer ECMAScript versions of dependencies\n        inject=[\"./my-shim.js\", \"./other-shim.js\"],  # allows to automatically replace a global variable with an import from another file\n        esbuild_args={ # Pass additional arguments to esbuild\n            \"--log-limit\": \"0\",\n            \"--splitting\": True}\n    )\n)","version":"2"},"csharp":{"source":"new NodejsFunction(this, \"my-handler\", new NodejsFunctionProps {\n    Bundling = new BundlingOptions {\n        Minify = true,  // minify code, defaults to false\n        SourceMap = true,  // include source map, defaults to false\n        SourceMapMode = SourceMapMode.INLINE,  // defaults to SourceMapMode.DEFAULT\n        SourcesContent = false,  // do not include original source into source map, defaults to true\n        Target = \"es2020\",  // target environment for the generated JavaScript code\n        Loader = new Dictionary<string, string> {  // Use the 'dataurl' loader for '.png' files\n            { \".png\", \"dataurl\" } },\n        Define = new Dictionary<string, string> {  // Replace strings during build time\n            { \"process.env.API_KEY\", JSON.Stringify(\"xxx-xxxx-xxx\") },\n            { \"process.env.PRODUCTION\", JSON.Stringify(true) },\n            { \"process.env.NUMBER\", JSON.Stringify(123) } },\n        LogLevel = LogLevel.SILENT,  // defaults to LogLevel.WARNING\n        KeepNames = true,  // defaults to false\n        Tsconfig = \"custom-tsconfig.json\",  // use custom-tsconfig.json instead of default,\n        Metafile = true,  // include meta file, defaults to false\n        Banner = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Footer = \"/* comments */\",  // requires esbuild >= 0.9.0, defaults to none\n        Charset = Charset.UTF8,  // do not escape non-ASCII characters, defaults to Charset.ASCII\n        Format = OutputFormat.ESM,  // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n        MainFields = new [] { \"module\", \"main\" },  // prefer ECMAScript versions of dependencies\n        Inject = new [] { \"./my-shim.js\", \"./other-shim.js\" },  // allows to automatically replace a global variable with an import from another file\n        EsbuildArgs = new Dictionary<string, object> {  // Pass additional arguments to esbuild\n            { \"--log-limit\", \"0\" },\n            { \"--splitting\", true } }\n    }\n});","version":"1"},"java":{"source":"NodejsFunction.Builder.create(this, \"my-handler\")\n        .bundling(BundlingOptions.builder()\n                .minify(true) // minify code, defaults to false\n                .sourceMap(true) // include source map, defaults to false\n                .sourceMapMode(SourceMapMode.INLINE) // defaults to SourceMapMode.DEFAULT\n                .sourcesContent(false) // do not include original source into source map, defaults to true\n                .target(\"es2020\") // target environment for the generated JavaScript code\n                .loader(Map.of( // Use the 'dataurl' loader for '.png' files\n                        \".png\", \"dataurl\"))\n                .define(Map.of( // Replace strings during build time\n                        \"process.env.API_KEY\", JSON.stringify(\"xxx-xxxx-xxx\"),\n                        \"process.env.PRODUCTION\", JSON.stringify(true),\n                        \"process.env.NUMBER\", JSON.stringify(123)))\n                .logLevel(LogLevel.SILENT) // defaults to LogLevel.WARNING\n                .keepNames(true) // defaults to false\n                .tsconfig(\"custom-tsconfig.json\") // use custom-tsconfig.json instead of default,\n                .metafile(true) // include meta file, defaults to false\n                .banner(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .footer(\"/* comments */\") // requires esbuild >= 0.9.0, defaults to none\n                .charset(Charset.UTF8) // do not escape non-ASCII characters, defaults to Charset.ASCII\n                .format(OutputFormat.ESM) // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n                .mainFields(List.of(\"module\", \"main\")) // prefer ECMAScript versions of dependencies\n                .inject(List.of(\"./my-shim.js\", \"./other-shim.js\")) // allows to automatically replace a global variable with an import from another file\n                .esbuildArgs(Map.of( // Pass additional arguments to esbuild\n                        \"--log-limit\", \"0\",\n                        \"--splitting\", true))\n                .build())\n        .build();","version":"1"},"go":{"source":"lambda.NewNodejsFunction(this, jsii.String(\"my-handler\"), &NodejsFunctionProps{\n\tBundling: &BundlingOptions{\n\t\tMinify: jsii.Boolean(true),\n\t\t // minify code, defaults to false\n\t\tSourceMap: jsii.Boolean(true),\n\t\t // include source map, defaults to false\n\t\tSourceMapMode: lambda.SourceMapMode_INLINE,\n\t\t // defaults to SourceMapMode.DEFAULT\n\t\tSourcesContent: jsii.Boolean(false),\n\t\t // do not include original source into source map, defaults to true\n\t\tTarget: jsii.String(\"es2020\"),\n\t\t // target environment for the generated JavaScript code\n\t\tLoader: map[string]*string{\n\t\t\t // Use the 'dataurl' loader for '.png' files\n\t\t\t\".png\": jsii.String(\"dataurl\"),\n\t\t},\n\t\tDefine: map[string]*string{\n\t\t\t // Replace strings during build time\n\t\t\t\"process.env.API_KEY\": JSON.stringify(jsii.String(\"xxx-xxxx-xxx\")),\n\t\t\t\"process.env.PRODUCTION\": JSON.stringify(jsii.Boolean(true)),\n\t\t\t\"process.env.NUMBER\": JSON.stringify(jsii.Number(123)),\n\t\t},\n\t\tLogLevel: lambda.LogLevel_SILENT,\n\t\t // defaults to LogLevel.WARNING\n\t\tKeepNames: jsii.Boolean(true),\n\t\t // defaults to false\n\t\tTsconfig: jsii.String(\"custom-tsconfig.json\"),\n\t\t // use custom-tsconfig.json instead of default,\n\t\tMetafile: jsii.Boolean(true),\n\t\t // include meta file, defaults to false\n\t\tBanner: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tFooter: jsii.String(\"/* comments */\"),\n\t\t // requires esbuild >= 0.9.0, defaults to none\n\t\tCharset: lambda.Charset_UTF8,\n\t\t // do not escape non-ASCII characters, defaults to Charset.ASCII\n\t\tFormat: lambda.OutputFormat_ESM,\n\t\t // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n\t\tMainFields: []*string{\n\t\t\tjsii.String(\"module\"),\n\t\t\tjsii.String(\"main\"),\n\t\t},\n\t\t // prefer ECMAScript versions of dependencies\n\t\tInject: []*string{\n\t\t\tjsii.String(\"./my-shim.js\"),\n\t\t\tjsii.String(\"./other-shim.js\"),\n\t\t},\n\t\t // allows to automatically replace a global variable with an import from another file\n\t\tEsbuildArgs: map[string]interface{}{\n\t\t\t // Pass additional arguments to esbuild\n\t\t\t\"--log-limit\": jsii.String(\"0\"),\n\t\t\t\"--splitting\": jsii.Boolean(true),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-nodejs.SourceMapMode"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-nodejs.BundlingOptions","@aws-cdk/aws-lambda-nodejs.Charset","@aws-cdk/aws-lambda-nodejs.Charset#UTF8","@aws-cdk/aws-lambda-nodejs.LogLevel","@aws-cdk/aws-lambda-nodejs.LogLevel#SILENT","@aws-cdk/aws-lambda-nodejs.NodejsFunction","@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps","@aws-cdk/aws-lambda-nodejs.OutputFormat","@aws-cdk/aws-lambda-nodejs.OutputFormat#ESM","@aws-cdk/aws-lambda-nodejs.SourceMapMode","@aws-cdk/aws-lambda-nodejs.SourceMapMode#INLINE","@aws-cdk/core.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { DockerImage, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda-nodejs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":18,"75":39,"91":1,"104":1,"106":6,"192":2,"193":5,"194":12,"196":3,"197":1,"226":1,"281":25},"fqnsFingerprint":"033ef64a2d5ec28750722dde98f4e265397dfcbc9d71a9561c9c85b9d07f996f"}}}